syntax = "proto3";

package burdock;
import "types.proto";

message Analysis {
    map<uint32, Component> graph = 1;
    PrivacyDefinition privacy_definition = 2;
    RuntimeDefinition runtime_definition = 3;
}

message RuntimeDefinition {
    string name = 1;
    string version = 2;
}

message PrivacyDefinition {
    // upper bound
    double epsilon = 1;
    double delta = 2;
    double rho = 3;

    uint32 group_size = 4;

    enum Distance {
        // (e, 0)-differential privacy
        PURE = 0;

        // (e, d)-differential privacy
        APPROXIMATE = 1;

        // https://arxiv.org/pdf/1702.07476.pdf
        RENYI = 2;

        // https://arxiv.org/pdf/1603.01887.pdf
        CONCENTRATED = 3;

        // https://arxiv.org/pdf/1905.02383.pdf
        F = 4;
    }
    Distance distance = 5;

    enum Neighboring {
        SUBSTITUTE = 0;
        ADD_REMOVE = 1;
    }
    Neighboring neighboring = 6;
}

message Component {
    message Field {
        uint32 source_node_id = 1;
        string source_field = 2;
    }

    map<string, Field> arguments = 1;

    oneof value {
        Add add = 2;
        Laplace laplace = 3;
        Literal literal = 4;
        Constant constant = 5;
        Mean mean = 6;
        DataSource datasource = 7;
        DPMean dpmean = 8;
        Clip clip = 9;
        Subtract subtract = 10;
        Divide divide = 11;
        Multiply multiply = 12;
        Power power = 13;
        Negate negate = 14;
        DPVariance dpvariance = 15;
        DPMomentRaw dpmomentraw = 16;
        DPCovariance dpcovariance = 17;
    }

}

message Add {}
message Subtract {}
message Divide {}
message Multiply {}
message Power {}
message Negate {}

message Laplace {
    double epsilon = 1;
}
message Literal {
    ArrayND value = 1;
}
message Constant {}
message Mean {}
message DataSource {
    string dataset_id = 1;
    string column_id = 2;

    // TODO: constraints/nature should be moved to arguments, THEY ARE PRIVATE
    // TODO: is nature necessary? if categorical, then could cast the other types to strings
    DataType datatype = 3;
    enum Nature {
        UNKNOWN = 0;
        CONTINUOUS = 1;
        CATEGORICAL = 2;
    }
    Nature nature = 4;

    // should be a 1D array of the unique values (likely bool, int, or string)
    ArrayND constraints = 5;
}
message Clip {}

message DPMean {
    double epsilon = 1;
    Mechanism mechanism = 2;   
}
message DPVariance {
    double epsilon = 1;
    Mechanism mechanism = 2;   
}

message DPMomentRaw {
    double epsilon = 1;
    Mechanism mechanism = 2;   
    uint32 order = 3;
}

message DPCovariance {
    double epsilon = 1;
    Mechanism mechanism = 2;
}