syntax = "proto3";

package yarrow;
import "value.proto";

// TODO: replace this file with autogenerated code derived from components/


message Component {
    // uint32 value is source_node_id
    map<string, uint32> arguments = 1;
    // if true, then don't include the evaluation for this component in the release
    bool omit = 2;
    // for interactive analyses
    uint32 batch = 3;

    oneof variant {
        // data loading
        Materialize materialize = 100; // load a string table into columnar hashmap
        Index index = 101; // collect value from hashmap
        Stack stack = 102; // stack arguments along an axis of an array
        Literal literal = 110; // propagate a preset value in the release
        Constant constant = 111; // pass a value from the analysis. Internal use only

        // -- manipulations --
        // type manipulations
        Cast cast = 200;
        // general manipulations
        Clamp clamp = 221;
        Impute impute = 222;
        RowMax rowmax = 223;
        RowMin rowmin = 224;
        Resize resize = 225;
        Filter filter = 226;
        Partition partition = 227;

        // arithmetic manipulations
        Add add = 250;
        Subtract subtract = 251;
        Multiply multiply = 252;
        Divide divide = 253;
        Power power = 254;
        Log log = 255;
        Modulo modulo = 256;
        Remainder remainder = 257;
        Negative negative = 258;
        // boolean manipulations
        Equal equal = 270;
        GreaterThan greaterthan = 271;
        LessThan lessthan = 272;
        And and = 273;
        Or or = 274;
        Negate negate = 275;

        // high level components
        DPSum dpsum = 300;
        DPCount dpcount = 301;
        DPMean dpmean = 302;
        DPVariance dpvariance = 303;
        DPMedian dpmedian = 304;
        DPMomentRaw dpmomentraw = 305;
        DPCovariance dpcovariance = 306;
        DPMinimum dpminimum = 307;
        DPMaximum dpmaximum = 308;
        DPHistogram dphistogram = 309;

        // public aggregations
        Sum sum = 400;
        Count count = 401;
        Mean mean = 402;
        Variance variance = 403;
        Quantile quantile = 404;
        KthRawSampleMoment kthrawsamplemoment = 405;
        Covariance covariance = 406;
        Minimum minimum = 407;
        Maximum maximum = 408;
        Bin bin = 409;

        // mechanisms
        LaplaceMechanism laplacemechanism = 500;
        GaussianMechanism gaussianmechanism = 501;
        SimpleGeometricMechanism simplegeometricmechanism = 502;
        ExponentialMechanism exponentialmechanism = 503;
    }
}

// data loading
message Materialize {
    bool private = 1;
    oneof value {
        string file_path = 10;
        string url_path = 11;
        Value literal = 12;
    }
}
message Index {
    repeated string path = 1;
}

message Stack {}
message Literal {
    bool private = 1;
}
message Constant {
    Value value = 1;
}

// -- manipulations --
// type manipulations
message Cast {}
// general manipulations
message Bin {
    string side = 1;
}
message Clamp {}
message Impute {}
message RowMax {}
message RowMin {}
message Resize {}
message Filter {}
message Partition {}

// arithmetic manipulations
message Add {}
message Subtract {}
message Multiply {}
message Divide {}
message Power {}
message Log {}
message Modulo {}
message Remainder {}
message Negative {}
// boolean manipulations
message Equal {}
message GreaterThan {}
message LessThan {}
message And {}
message Or {}
message Negate {}

// high level components
message DPSum {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPCount {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPMean {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPVariance {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
    bool finite_sample_correction = 3;
}
message DPMedian {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPMomentRaw {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
    int64 order = 3;
}
message DPCovariance {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPMinimum {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPMaximum {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPHistogram {
    repeated PrivacyUsage privacy_usage = 1;
    string implementation = 2;
    string side = 3;
}

// public aggregations
message Sum {}
message Count {}
message Mean {}
message Variance {
    bool finite_sample_correction = 1;
}
message Quantile {
    double quantile = 1;
}
message KthRawSampleMoment {
    int64 k = 1;
}
message Covariance {}
message Minimum {}
message Maximum {}

message LaplaceMechanism {
    repeated PrivacyUsage privacy_usage = 1;
}
message GaussianMechanism {
    repeated PrivacyUsage privacy_usage = 1;
}
message SimpleGeometricMechanism {
    repeated PrivacyUsage privacy_usage = 1;
    bool enforce_constant_time = 2;
}
message ExponentialMechanism {
    repeated PrivacyUsage privacy_usage = 1;
}
