syntax = "proto3";

package yarrow;
import "value.proto";

// TODO: replace this file with autogenerated code derived from components/


message Component {
    // uint32 value is source_node_id
    map<string, uint32> arguments = 1;
    // if true, then don't include the evaluation for this component in the release
    bool omit = 2;
    // for interactive analyses
    uint32 batch = 3;

    oneof value {
        // data loading
        Materialize materialize = 100; // load a string table into columnar hashmap
        Index index = 101; // collect value from hashmap
        Stack stack = 102; // stack arguments along an axis of an array
        Literal literal = 110; // propagate a value in the protobuf
        Constant constant = 111; // propagate a value in the release

        // -- manipulations --
        // type manipulations
        ToString tostring = 200;
        ToInt toint = 201;
        ToBool tobool = 202;
        // general manipulations
        Bin bin = 220;
        Clamp clamp = 221;
        Impute impute = 222;
        RowMax rowmax = 223;
        RowMin rowmin = 224;
        // arithmetic manipulations
        Add add = 250;
        Subtract subtract = 251;
        Multiply multiply = 252;
        Divide divide = 253;
        Power power = 254;
        Log log = 255;
        Modulus modulus = 256;
        Div div = 257;
        // boolean manipulations
        Equal equal = 270;
        GreaterThan greaterthan = 271;
        LessThan lessthan = 272;
        And and = 273;
        Or or = 274;
        Negate negate = 275;

        // high level components
        DPSum dpsum = 300;
        DPCount dpcount = 301;
        DPMean dpmean = 302;
        DPVariance dpvariance = 303;
        DPMedian dpmedian = 304;
        DPMomentRaw dpmomentraw = 305;
        DPCovariance dpcovariance = 306;

        // public aggregations
        Sum sum = 400;
        Count count = 401;
        Mean mean = 402;
        Variance variance = 403;
        Median median = 404;
        KthRawSampleMoment kthrawsamplemoment = 405;
        Covariance covariance = 406;

        // mechanisms
        LaplaceMechanism laplace_mechanism = 500;
        GaussianMechanism gaussian_mechanism = 501;
        SimpleGeometricMechanism simple_geometric_mechanism = 502;

        // deprecated
        Laplace laplace = 1000;
        ImputeFloatUniform impute_float_uniform = 1001;
        ImputeFloatGaussian impute_float_gaussian = 1002;
        ImputeIntUniform impute_int_uniform = 1003;
        DataSource datasource = 1007; // load a single column from a csv file as type
    }
}
// data loading
message Materialize {
    string dataset_id = 1;
}
message Index {
    repeated string path = 1;
}
message DataSource {
    string dataset_id = 1;
    string column_id = 2;

    // TODO: constraints/nature should be moved to arguments, THEY ARE PRIVATE
    // TODO: is nature necessary? if categorical, then could cast the other types to strings
    DataType datatype = 3;
    enum Nature {
        UNKNOWN = 0;
        CONTINUOUS = 1;
        CATEGORICAL = 2;
    }
    Nature nature = 4;

    // should be a 1D array of the unique values (likely bool, int, or string)
    Value constraints = 5;
}
message Stack {}
message Literal {
    Value value = 1;
}
message Constant {}

// -- manipulations --
// type manipulations
message ToString {}
message ToInt {}
message ToBool {}
// general manipulations
message Bin {}
message Clamp {}
message Impute {

}
// arithmetic manipulations
message Add {}
message Subtract {}
message Multiply {}
message Divide {}
message Power {}
message Log {}
message Modulus {}
message Div {}
// boolean manipulations
message Equal {}
message GreaterThan {}
message LessThan {}
message And {}
message Or {}
message Negate {}

// high level components
message DPSum {
    PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPCount {
    PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPMean {
    PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPVariance {
    PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPMedian {
    PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}
message DPMomentRaw {
    PrivacyUsage privacy_usage = 1;
    string implementation = 2;
    uint32 order = 3;
}
message DPCovariance {
    PrivacyUsage privacy_usage = 1;
    string implementation = 2;
}


// public aggregations
message Sum {}
message Count {}
message Mean {}
message Variance {
    bool finite_sample_correction = 1;
}
message Median {}
message KthRawSampleMoment {
    int64 k = 1;
}
message Covariance {}

// distribution sampling
message SampleLaplace {}
message SampleGeometric {}
message SampleDiscrete {}
message SampleGaussian {}

// deprecated
message Laplace {
    double epsilon = 1;
}
message ImputeFloatUniform {
    double min = 1;
    double max = 2;
}
message ImputeFloatGaussian {
    double shift = 1;
    double scale = 2;
    double min = 3;
    double max = 4;
}
message ImputeIntUniform {
    double min = 1;
    double max = 2;
}

message LaplaceMechanism {
    PrivacyUsage privacy_usage = 1;
    double sensitivity = 2;
}
message GaussianMechanism {
    PrivacyUsage privacy_usage = 1;
    double sensitivity = 2;
}
message SimpleGeometricMechanism {
    double epsilon = 1;
    int64 count_min = 2;
    int64 count_max = 3;
    bool enforce_constant_time = 4;
}

message RowMax {}
message RowMin {}
